# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:08:53+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic
from fastapi import Query

from models import (
    RestServiceError,
    Transaction,
    TransactionSearchResponse,
    Transfer,
    TransferInfo,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='The Transfers API provides endpoints that you can use to get information about all your transactions, move funds within your balance platform or send funds from your balance platform to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments).\n\n## Authentication\nYour Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: YOUR_API_KEY" \\\n...\n```\n\nAlternatively, you can use the username and password to connect to the API using basic authentication. For example:\n\n```\ncurl\n-H "Content-Type: application/json" \\\n-U "ws@BalancePlatform.YOUR_BALANCE_PLATFORM":"YOUR_WS_PASSWORD" \\\n...\n```\n## Roles and permissions\nTo use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you.\n## Versioning\nThe Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://balanceplatform-api-test.adyen.com/btl/v3/transfers\n```\n## Going live\nWhen going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.\n\n',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Transfers API',
    version='3',
    servers=[{'url': 'https://balanceplatform-api-test.adyen.com/btl/v3'}],
)


@app.get(
    '/transactions',
    description=""" Returns all transactions related to a balance account with a payment instrument of type **bankAccount**.

This endpoint supports cursor-based pagination. The response returns the first page of results, and returns links to the next page when applicable. You can use the links to page through the results. The response also returns links to the previous page when applicable. """,
    tags=['transaction_processing'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_transactions(
    balance_platform: Optional[str] = Query(None, alias='balancePlatform'),
    payment_instrument_id: Optional[str] = Query(None, alias='paymentInstrumentId'),
    account_holder_id: Optional[str] = Query(None, alias='accountHolderId'),
    balance_account_id: Optional[str] = Query(None, alias='balanceAccountId'),
    cursor: Optional[str] = None,
    created_since: datetime = Query(..., alias='createdSince'),
    created_until: datetime = Query(..., alias='createdUntil'),
    limit: Optional[int] = None,
):
    """
    Get all transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/transactions/{id}',
    description=""" Returns a transaction. """,
    tags=['transaction_processing'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_transactions_id(id: str):
    """
    Get a transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transfers',
    description=""" Starts a request to transfer funds to [balance accounts](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts), [transfer instruments](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments), or third-party bank accounts. Adyen sends the outcome of the transfer request through webhooks.

To use this endpoint, you need an additional role for your API credential and transfers must be enabled for the source balance account. Your Adyen contact will set these up for you. """,
    tags=['transaction_processing'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_transfers(body: TransferInfo = None):
    """
    Transfer funds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
